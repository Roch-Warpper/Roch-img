#!/usr/bin/env python
import os
import sys


def chroot_status():
    status = os.system("ischroot");
    if status == 0:
        return True
    else:
        return False

def update_package_cache():
    if chrooted:
        status = os.system("apt-get update --assume-yes");
        print "Running apt-get update"
    else:
        print "update_package_cache(): apt-get update"

def install_key(url):
    if chrooted:
        status = os.system("wget %s -O - | apt-key add -"%(url))
        print "Adding apt key %s"%(url)
    else:
        print("install_key(url): wget %s -O - | apt-key add -"%(url))

def install_package(pkg):
    if chrooted:
        status = os.system("export DEBIAN_FRONTEND=noninteractive && apt-get install --assume-yes %s"%(pkg))
        print "Installing %s"%(pkg)
    else:
        print("install_package(pkg): export DEBIAN_FRONTEND=noninteractive apt-get install --assume-yes %s"%(pkg))

def deinstall_package(pkg):
    if chrooted:
        status = os.system("apt-get purge --assume-yes --force-yes %s"%(pkg))
        print "Deinstalling %s"%(pkg)
    else:
        print("deinstall_package(pkg): apt-get purge --assume-yes --force-yes %s"%(pkg))

def apt_autorm():
    if chrooted:
        status = os.system("apt-get autoremove --assume-yes")
        print "apt-get autoremoving"
    else:
        print("apt-get autoremove")

def install_dpkg(pkg):
    if chrooted:
        status = os.system("dpkg -i %s/deb/%s"%(script_dir,pkg))
        print "Installing %s/deb/%s"%(script_dir,pkg)
    else:
        print("install_package(pkg): %s"%(pkg))

def install_pip(pkg):
    if chrooted:
        status = os.system("pip install %s"%(pkg))
        print "Installing %s"%(pkg)
    else:
        print("install_package(pkg): %s"%(pkg))

def remove_package(pkg):
    status = os.system("echo remove " + pkg)
    print str(status) + "\n"
#	apt-get --purge remove --assume-yes --force-yes "$@"

def add_repository():
    if chrooted:
        repo_file = open("/etc/apt/sources.list.d/ros-latest.list", "w")
        # print >> repo_file, "deb http://packages.ros.org/ros-shadow-fixed/ubuntu precise main #Robot Operating System"
        print >> repo_file, "deb http://packages.ros.org/ros/ubuntu trusty main #Robot Operating System"
        repo_file.close()
    else:
        print("add_repository(): deb ... #Robot Operating System")

def enable_multiuniverse():
    if chrooted:
        status = os.system("cp %s/sources.list /etc/apt/sources.list"%(script_dir))
        print "Enabling Multiverse and Universe"
    else:
        print("enable_multiuniverse(): cp %s/sources.list /etc/apt/sources.list"%(script_dir))

def enable_ros_bashrc():
    if chrooted:
        bashrc_file = open("/etc/skel/.bashrc", "a")
        print >> bashrc_file, """
source /opt/ros/indigo/setup.bash

## Under these lines is for Roch
export ROCH_BASE=roch
export ROCH_STACKS=standard
export ROCH_3D_SENSOR=astra     #for now have four support sensor [ asus_xtion_pro, kinect, r200, astra]
export ROCH_LASER=rplidar               #for now have two support laser [ ls01c, rplidar]
export ROCH_3D_SENSOR_ENABLE=true
export ROCH_3D_SENSOR_NAV_ENABLE=false
export ROCH_LASER_ENABLE=true

## ROS Network Configuration
export ROS_HOSTNAME=localhost
export ROS_MASTER_URI=http://localhost:11311

"""
        bashrc_file.close()
    else:
        print("enable_ros_bashrc(): source /opt/ros/indigo/setup.bash")

def main(args):
    global script_dir
    script_dir = os.path.dirname(sys.argv[0])
    remaster_dir = os.path.expanduser('~/tmp/remaster-root')
    #remaster_dir = os.path.expanduser('~/tmp/remaster-root')

    global chrooted
    # check if chrooted
    chrooted = chroot_status()
    if not chrooted:
	print "UCK Customization Script"
        print "----"
        print "Cannot detect chrooted environment: Running in DEBUG Mode"

    print >> sys.stderr, "enable_multiuniverse()"
    # FIXME: enable_multiuniverse()
    status = os.system('sudo add-apt-repository -y "deb http://mirrors.163.com/ubuntu/ trusty universe multiverse"')
    status = os.system('sudo add-apt-repository -y "deb http://mirrors.163.com/ubuntu/ trusty-updates universe multiverse"')
    add_repository()
    install_key("https://raw.githubusercontent.com/ros/rosdistro/master/ros.key")
    status = os.system("sudo add-apt-repository -y ppa:neautomation/ros")
    status = os.system("sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test")

    print >> sys.stderr, "update_package_cache()"
    update_package_cache()
    #status = os.system("mv /etc/kernel/postinst.d/zz-update-grub /etc/kernel/postinst.d/zz-update-grub.bak")
    #status = os.system("apt-get upgrade --assume-yes")
    #status = os.system("mv /etc/kernel/postinst.d/zz-update-grub.bak /etc/kernel/postinst.d/zz-update-grub")

    print >> sys.stderr, "Deinstall unwanted packages"
    # Deinstall unwanted packages
    apt_file = open("%s/apt_deinstall"%(script_dir),"r")
    for package in apt_file:
        package = package.strip()
        if package != "" and package[0] != "#":
            deinstall_package(package)
    apt_file.close()

    print >> sys.stderr, "Install packages via apt-get"
    # Install packages via apt-get
    apt_file = open("%s/apt_packages"%(script_dir),"r")
    for package in apt_file:
        package = package.strip()
        if package != "" and package[0] != "#":
            install_package(package)
    apt_file.close()

    print >> sys.stderr, "Install packages via dpkg"
    # Install packages via dpkg
    deb_file = open("%s/deb_packages"%(script_dir),"r")
    for package in deb_file:
        package = package.strip()
        if package != "" and package[0] != "#":
            install_dpkg(package)
    deb_file.close()

    print >> sys.stderr, "Install packages via pip"
    # Install packages via pip
    pip_file = open("%s/pip_packages"%(script_dir),"r")
    for package in pip_file:
        package = package.strip()
        if package != "" and package[0] != "#":
            install_pip(package)
    pip_file.close()

#    apt_autorm()
#    update_package_cache()
    #status = os.system("apt-get upgrade --assume-yes")

    print >> sys.stderr, "enable_ros_bashrc"
    enable_ros_bashrc()

    # Change dash to bash
    print >> sys.stderr, "Change Dash to bash"
    status = os.system("sudo echo 'dash dash/sh boolean false' | sudo debconf-set-selections")
    status = os.system("sudo DEBIAN_FRONTEND=noninteractive dpkg-reconfigure dash")
    

if __name__ == '__main__':
  main(sys.argv)
